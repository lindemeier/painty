workspace(name = "painty")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

http_archive(
    name = "rules_python",
    sha256 = "b5668cde8bb6e3515057ef465a35ad712214962f0b3a314e551204266c7be90c",
    strip_prefix = "rules_python-0.0.2",
    url = "https://github.com/bazelbuild/rules_python/releases/download/0.0.2/rules_python-0.0.2.tar.gz",
)

load("@rules_python//python:repositories.bzl", "py_repositories")

py_repositories()

load("@rules_python//python:pip.bzl", "pip_repositories")

pip_repositories()

# Group the sources of the library so that CMake rule have access to it
all_content = """filegroup(name = "all", srcs = glob(["**"]), visibility = ["//visibility:public"])"""

# Rule repository
git_repository(
    name = "rules_foreign_cc",
    branch = "master",
    remote = "https://github.com/bazelbuild/rules_foreign_cc.git",
)

load("@rules_foreign_cc//:workspace_definitions.bzl", "rules_foreign_cc_dependencies")

# Call this function from the WORKSPACE file to initialize rules_foreign_cc
#  dependencies and let neccesary code generation happen
#  (Code generation is needed to support different variants of the C++ Starlark API.).
#
#  Args:
#    native_tools_toolchains: pass the toolchains for toolchain types
#      '@rules_foreign_cc//tools/build_defs:cmake_toolchain' and
#      '@rules_foreign_cc//tools/build_defs:ninja_toolchain' with the needed platform constraints.
#      If you do not pass anything, registered default toolchains will be selected (see below).
#
#    register_default_tools: if True, the cmake and ninja toolchains, calling corresponding
#      preinstalled binaries by name (cmake, ninja) will be registered after
#      'native_tools_toolchains' without any platform constraints.
#      The default is True.
rules_foreign_cc_dependencies(register_default_tools = True)

# Eigen source code repository
http_archive(
    name = "eigen",
    build_file_content = all_content,
    sha256 = "0be9ab513cd911d55a15b80b67c8ffa7f8168b00bbd8c1cd9359b3081b2df8c1",
    strip_prefix = "eigen-3.3.7-patched",
    # urls = ["https://gitlab.com/thomas.lindemeier/eigen/-/archive/3.3.7-patched/eigen-3.3.7-patched.tar.gz"],
    # usually the urls above should be used. However, bazel is not able to download from gitlab and I therefore use an url to a copy of the archive for now.
    urls = ["https://gist.github.com/lindemeier/e1c3506ea6b0e20a6b08d1ac142c8380/raw/ca1779dbb9964a5df4f950bfebd5833ad7f79528/eigen-3.3.7-patched.tar.gz"],
)

# OpenCV source release
http_archive(
    name = "opencv",
    build_file_content = all_content,
    sha256 = "7faa0991c74cda52313ee37ef73f3e451332a47e7aa36c2bb2240b69f5002d27",
    strip_prefix = "opencv-4.4.0",
    urls = ["https://github.com/opencv/opencv/archive/4.4.0.zip"],
)

# Google test library
git_repository(
    name = "gtest",
    branch = "v1.10.x",
    remote = "https://github.com/google/googletest",
)

# dependency for generating compilation database
http_archive(
    name = "com_grail_bazel_compdb",
    sha256 = "bcecfd622c4ef272fd4ba42726a52e140b961c4eac23025f18b346c968a8cfb4",
    strip_prefix = "bazel-compilation-database-0.4.5",
    urls = ["https://github.com/grailbio/bazel-compilation-database/archive/0.4.5.tar.gz"],
)

# qt dependency for painty paint app
git_repository(
    name = "com_justbuchanan_rules_qt",
    branch = "master",
    remote = "https://github.com/justbuchanan/bazel_rules_qt.git",
)
new_local_repository(
    name = "qt",
    build_file = "@com_justbuchanan_rules_qt//:qt.BUILD",
    #  path = "/usr/include/qt", # May need configuring for your installation
    # For Qt5 on Ubuntu 16.04
    path = "/usr/include/x86_64-linux-gnu/qt5/",
)
